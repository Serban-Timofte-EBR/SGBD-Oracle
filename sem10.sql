-- Ex. 1
CREATE OR REPLACE TRIGGER IW
BEFORE INSERT ON Produse
FOR EACH ROW
DECLARE
  new_id INT;
BEGIN
  SELECT COALESCE(MAX(id_produs), 0) + 1 INTO new_id FROM Produse;
  :NEW.id_produs := new_id;
END;

-- Ex. 2 
CREATE OR REPLACE TRIGGER trg_update_prod_cascada
AFTER UPDATE OF ID_PRODUS ON PRODUSE
FOR EACH ROW
BEGIN
  UPDATE RAND_COMENZI
  SET ID_PRODUS = :NEW.ID_PRODUS
  WHERE ID_PRODUS = :OLD.ID_PRODUS;
END;

-- Ex. 3
CREATE OR REPLACE TRIGGER trg_stop_marire
BEFORE UPDATE OF SALARIUL ON ANGAJATI
FOR EACH ROW
WHEN (OLD.DATA_ANGAJARE <= ADD_MONTHS(SYSDATE, -120))
BEGIN1s
  IF :NEW.SALARIUL > :OLD.SALARIUL THEN
    RAISE_APPLICATION_ERROR(-20001, 'Nu se poate mari salariul pentru angajatii cu vechimea mai mare de 10 ani.');
  END IF;
END;

-- Ex. 4
ALTER TABLE PRODUSE ADD STOC NUMBER(5) DEFAULT 2000;
CREATE OR REPLACE TRIGGER trg_verifica_stoc
BEFORE INSERT OR UPDATE OF CANTITATE ON RAND_COMENZI
FOR EACH ROW
DECLARE
  stoc_disponibil NUMBER;
BEGIN
  SELECT STOC INTO stoc_disponibil FROM PRODUSE WHERE ID_PRODUS = :NEW.ID_PRODUS;
  IF :NEW.CANTITATE > stoc_disponibil THEN
    RAISE_APPLICATION_ERROR(-20002, 'Cantitatea comandata depaseste stocul disponibil.');
  ELSE
    IF INSERTING THEN
      UPDATE PRODUSE SET STOC = STOC - :NEW.CANTITATE WHERE ID_PRODUS = :NEW.ID_PRODUS;
    ELSIF UPDATING THEN
       UPDATE PRODUSE SET STOC = STOC + :OLD.CANTITATE - :NEW.CANTITATE WHERE ID_PRODUS = :NEW.ID_PRODUS;
    END IF;
  END IF;
END;O
/

-- INSERT INTO RAND_COMENZI VALUES (2354, 2308, 10, 2001);
UPDATE RAND_COMENZI SET CANTITATE = 300 WHERE ID_COMANDA = 2354 AND ID_PRODUS = 2308;

-- Ex. 5
CREATE OR REPLACE TRIGGER trg_actualizeaza_istoric
AFTER UPDATE OF ID_FUNCTIE ON ANGAJATI
FOR EACH ROW
DECLARE
  v_data_sfarsit DATE;
BEGIN
  SELECT MAX(DATA_SFARSIT) INTO v_data_sfarsit FROM ISTORIC_FUNCTII WHERE ID_ANGAJAT = :OLD.ID_ANGAJAT;
  
  IF v_data_sfarsit IS NULL THEN
    v_data_sfarsit := :OLD.DATA_ANGAJARE;
  END IF;
  
  INSERT INTO ISTORIC_FUNCTII (ID_ANGAJAT, ID_FUNCTIE, DATA_INCEPUT, DATA_SFARSIT, ID_DEPARTAMENT)
  VALUES (:OLD.ID_ANGAJAT, :OLD.ID_FUNCTIE, v_data_sfarsit1, SYSDATE, :OLD.ID_DEPARTAMENT);
END;
/

CREATE OR REPLACE TRIGGER trg_sterge_istoric
BEFORE DELETE ON ANGAJATI
FOR EACH ROW
BEGIN
  DELETE FROM ISTORIC_FUNCTII WHERE ID_ANGAJAT = :OLD.ID_ANGAJAT;
EN
/

UPDATE ANGAJATI
SET ID_FUNCTIE = 'IT_PROG'
WHERE ID_ANGAJAT = 101;

SELECT * FROM ISTORIC_FUNCTII WHERE ID_ANGAJAT = 101;

DELETE FROM ANGAJATI WHERE ID_ANGAJAT = 110;

ROLLBACK;